#!/usr/bin/env python
# -*- coding: utf-8 -*-
from numpy import dtype, loadtxt, savetxt, array, genfromtxt, where, all
import numpy as np
from scipy import *
from scipy import optimize
import matplotlib.pyplot as plt
import os
import StringIO

from optparse import OptionParser


from math import pi
from math import atan


# Reader file generated by OpenFOAM. All values are stored in a dictionary
#####################################################################

infile = open("results.dat", "r")
lines = infile.readlines()
infile.close()

data={}
first_line=lines[0]
identifier=first_line.split()


for line in lines[1:]:  
  segment = line.split()
  caseIdent = segment[0]
  values = segment[1:]
  data[caseIdent] = {}
  for p, v in zip(identifier, values):
    data[caseIdent][p] = float(v)

    
    
# Reader file generated using empirical correlations. All values are stored in a dictionary   
#####################################################################

infileEC = open("resultsEC.dat", "r")
linesEC = infileEC.readlines()
infileEC.close()

dataEC={}
first_line=linesEC[0]
identifierEC=first_line.split()
  

for line in linesEC[1:]:  
  segment = line.split()
  caseIdent = segment[0]
  values = segment[1:]
  dataEC[caseIdent] = {}
  for p, v in zip(identifierEC, values):
    if (values != 0):
      dataEC[caseIdent][p] = float(v)    
    else:
      dataEC[caseIdent][p] = int(v)
      
    
#####################################################################    



r_int=[0.035, 0.0425, 0.055]
clearance=[0.02, 0.04, 0.06]

#T_int= array([450, 550, 618])
#T_diff=array([100, 150, 192])


T_int=[450., 550., 618.]
T_diff=[100., 150., 192.]
  

#for p in sorted(data):
  
  #for t in T_int:
   ## print t, T_int
    
    #for s in T_diff:      
      #T_ext= t - s
      
      
      #for r in r_int:
	
	#for c in clearance:
	  #r_ext= r + c	  
	 ## print T_int, T_ext, r_int, r_ext
	  
	  #for m in sorted(dataEC):    

	
	    #if ((dataEC[m]["T_int"] == t and dataEC[m]["T_ext"] == T_ext and dataEC[m]["r_int"] == r and dataEC[m]["r_ext"] == r_ext) and (data[p]["T_int"] == t and data[p]["T_ext"] == T_ext and data[p]["r_int"] == r and data[p]["r_ext"] == r_ext)):

	      #data[p]['qConv_EC1'] = dataEC[m]["Qconv"]
	      ##print data[p]
	      
	      

  
#for r in r_int:
  #print r
  
  #for c in clearance:      
    #r_ext= r + c    
    #print r, r_ext
    
    #for t in T_int:
      #print r, r_ext, t
      
      #for s in T_diff:
	#T_ext= t - s	  
	#print r, r_ext, t, T_ext
	
	#for m in sorted(dataEC):    

      
	  #if ( (dataEC[m]["r_int"] == r) and (dataEC[m]["r_ext"] == r_ext) and (dataEC[m]["T_int"] == t) and (dataEC[m]["T_ext"] == T_ext)):
	    #val = dataEC[m]["Qconv"]
	    #print r, r_ext, t, T_ext, dataEC[m]["r_int"], dataEC[m]["r_ext"], dataEC[m]["T_int"], dataEC[m]["T_ext"],  "FOUND!!!!"
	    
	    #for p in data:
	      #if (data[p]["T_int"] == t and data[p]["T_ext"] == T_ext and data[p]["r_int"] == r and data[p]["r_ext"] == r_ext):
		
		#data[p]['qConv_EC1'] = dataEC[m]["Qconv"]
		

for r in r_int:
  print r
  
  for c in clearance:      
    r_ext= r + c    
    print r, r_ext
    
    for t in T_int:
      print r, r_ext, t
      
      for s in T_diff:
	T_ext= t - s	  
	print r, r_ext, t, T_ext
	
	for m in sorted(dataEC):    

      
	  if ( (dataEC[m]["r_int"] == r) and (dataEC[m]["r_ext"] == r_ext) ):
	    val = dataEC[m]["Qconv"]
	    print r, r_ext, dataEC[m]["r_int"], dataEC[m]["r_ext"],  "FOUND!!!!"
	    
	    for p in data:
	      if (data[p]["r_int"] == r and data[p]["r_ext"] == r_ext):
		
		data[p]['qConv_EC1'] = dataEC[m]["Qconv"]		
		
	    
	  #else:
	    #print t, T_ext, r, r_ext, dataEC[m]["T_int"], dataEC[m]["T_ext"], dataEC[m]["r_int"], dataEC[m]["r_ext"], "Not found"
	    
	    
		#print data[p]
	    

for p in data:
  print data[p] 
  
  

#for p in dataEC:
  #print dataEC[p]
  #if("T_int":350 in dataEC[p]):
 ## if (["T_int": 550, "T_ext": 450, "r_int": 0.035, "r_ext": 0.055] in dataEC[p]):
 ## if (dataEC[p]["T_int": 550, "T_ext": 450, "r_int": 0.035, "r_ext": 0.055] == True):
    #print "exists"
  


